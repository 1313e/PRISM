# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

variables:
  python.arch: 'x64'

strategy:
  matrix:
    linux-python35:
      imageName: 'ubuntu-16.04'
      python.version: '3.5'
    linux-python36:
      imageName: 'ubuntu-16.04'
      python.version: '3.6'
    linux-python37:
      imageName: 'ubuntu-16.04'
      python.version: '3.7'
    mac-python36:
      imageName: 'macos-10.13'
      python.version: '3.6'
    mac-python37:
      imageName: 'macos-10.13'
      python.version: '3.7'
    windows-x86-python35:
      imageName: 'windows-2019'
      python.version: '3.5'
      python.arch: 'x86'
    windows-x86-python36:
      imageName: 'windows-2019'
      python.version: '3.6'
      python.arch: 'x86'
    windows-x86-python37:
      imageName: 'windows-2019'
      python.version: '3.7'
      python.arch: 'x86'
    windows-x64-python35:
      imageName: 'windows-2019'
      python.version: '3.5'
      python.arch: 'x64'
    windows-x64-python36:
      imageName: 'windows-2019'
      python.version: '3.6'
      python.arch: 'x64'
    windows-x64-python37:
      imageName: 'windows-2019'
      python.version: '3.7'
      python.arch: 'x64'
  maxParallel: 10

pool:
  vmImage: $(imageName)

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: $(python.version)
    architecture: $(python.arch)
    addToPath: true
  displayName: 'Use Python $(python.version) $(python.arch)'

# Install dependencies and PRISM
- script: |
    python -m pip install --upgrade pip setuptools wheel
    pip install -r requirements_dev.txt
  displayName: "Install testing dependencies"

# Test deployability
- script: |
    check-manifest
    python setup.py sdist bdist_wheel
    twine check dist/*
    python -c "import prism; prism.get_info()"
  displayName: "Test deployability"

# Test package in serial
- script: |
    coverage run --rcfile=setup.cfg -m pytest
  displayName: "Test package in serial"

# Install MPI
# Linux
- bash: |
    sudo apt-get install -y -q openmpi-bin libopenmpi-dev
  condition: eq(variables['Agent.OS'], 'Linux')
  displayName: Install MPI distribution on Linux
# Mac OS-X
- bash: |
    brew install openmpi
  condition: eq(variables['Agent.OS'], 'Darwin')
  displayName: Install MPI distribution on Mac OS-X
# Windows
- powershell: |

  condition: eq(variables['Agent.OS'], 'Windows_NT')
  displayName: Install MPI distribution on Windows