# -*- coding: utf-8 -*-

"""
PRISM Docstrings
================
Contains a collection of docstrings that are reused throughout the
documentation of the various functions in the *PRISM* package.

"""


# Write the string for indicating default values
ds = ". Default: "


# %% EMUL_I DOCSTRINGS
# Description of emul_i used in __call__/construct
call_emul_i_doc = \
    """emul_i : int or None. Default: None
           If int, number indicating the requested emulator iteration.
           If *None*, the next iteration of the loaded emulator system will be
           constructed."""

# Description of emul_i used in the get_emul_i() method of the Emulator class
get_emul_i_doc = \
    """emul_i : int or None
           Number indicating the requested emulator iteration."""

# Description of emul_i used in basically all standard hidden functions
std_emul_i_doc = \
    """emul_i : int
           Number indicating the requested emulator iteration."""

# Description of emul_i used in all user functions except __call__/construct
user_emul_i_doc = \
    """emul_i : int or None. Default: None
           If int, number indicating the requested emulator iteration.
           If *None*, the last iteration of the loaded emulator system will be
           used."""


# %% EMUL_S DOCSTRINGS
# Description of sequence of emul_s used in all standard hidden functions
emul_s_seq_doc = \
    """emul_s_seq : list of int
           List of numbers indicating the requested emulator systems."""

# Description of emul_s used in basically all standard hidden functions
lemul_s_doc = \
    """lemul_s : int or None
           Number indicating the requested local emulator system.
           If *None*, use the master emulator file instead."""


# %% PIPELINE DOCSTRINGS
# Description for the different paths parameters
paths_doc = \
        """root_dir : str or None{0}{1}
            String containing the absolute path of the root directory where all
            working directories are stored. If *None*, root directory will be
            set to the directory this class was initialized at.
        working_dir : str, int or None{0}{2}
            String containing the name of the working directory of the emulator
            in `root_dir`. If int, a new working directory will be created in
            `root_dir`. If *None*, working directory is set to the last one
            that was created in `root_dir` that starts with the given `prefix`.
            If no directories are found, one will be created.
        prefix : str{0}{3}
            String containing a prefix that is used for naming new working
            directories or scan for existing ones.
        hdf5_file : str{0}{4}
            String containing the name of the master HDF5-file in `working_dir`
            to be used in this class instance. Different types of master
            HDF5-files can be provided:
                *Non-existing master HDF5-file*: This file will be created and
                used to save the constructed emulator system in.

                *Existing master HDF5-file*: This file will be used to
                regenerate a previously constructed emulator system.
        prism_file : str or None{0}{5}
            String containing the absolute or relative path to the TXT-file
            containing the *PRISM* parameters that need to be changed from
            their default values. If a relative path is given, its path must be
            relative to `root_dir` or the current directory. If *None*, no
            changes will be made to the default parameters."""
paths_doc_s = paths_doc.format("", "", "", "", "", "")
paths_doc_d = paths_doc.format(ds, "None", "None", "'prism_'", "'prism.hdf5'",
                               "'prism.txt'")

# Description for the call_model methods
call_model_doc = \
        """Obtain the output{3} corresponding to the provided `data_idx` that
        is generated by the model for a given model parameter sample{3} `{0}`.
        The current emulator iteration `emul_i` is also provided in case it is
        required by the :class:`~ModelLink` subclass.
        {4}
        Parameters
        ----------
        %s
        {0} : {2} array_like
            Model parameter sample{3} to calculate the model output for.
        data_idx : list of lists
            The list of data identifiers for which the model is requested to
            return the corresponding data values.

        Returns
        -------
        {1} : {2} :obj:`~numpy.ndarray` object
            Model output{3} corresponding to given `{0}`.""" % (std_emul_i_doc)
call_model_doc_s = call_model_doc.format("par_set", "mod_out", "1D", "", "")
call_model_doc_m = call_model_doc.format(
    "sam_set", "mod_set", "2D", " set",
    "\n\tThis is a multi-version of :meth:`~Pipeline._call_model`.\n")

# Descriptions for the ext_real_set parameters
ext_mod_set_doc = \
        """ext_mod_set : 1D or 2D :obj:`~numpy.ndarray` object
            Array containing the model outputs of all specified externally
            provided model evaluation samples."""
ext_real_set_doc = \
        """ext_real_set : list, dict or None
            List of arrays containing an externally calculated set of model
            evaluation samples and its data values, a dict with keys
            ``[sam_set, mod_set]`` containing these arrays or *None* if no
            external set needs to be used."""
ext_sam_set_doc = \
        """ext_sam_set : 1D or 2D :obj:`~numpy.ndarray` object
            Array containing the externally provided model evaluation
            samples."""

# Description of the temp parameter for the impl_cut list
impl_temp_doc = \
        """temp : bool
            Whether the implausibility parameters should only be stored in
            memory (*True*) or should also be saved to HDF5 (*False*)."""


# %% GENERAL DOCSTRINGS
# Description of the various get_default_parameters methods
def_par_doc = \
        """Generates a dict containing default values for all {0}
        parameters.

        Returns
        -------
        par_dict : dict
            Dict containing all default {0} parameter values."""

# Descriptions for various implausibility parameters
impl_cut_doc = \
        """impl_cut : 1D :obj:`~numpy.ndarray` object
            Full list containing the impl_cut-offs for all data points provided
            to the emulator.
        cut_idx : int
            Index of the first impl_cut-off in the impl_cut list that is not
            0."""

# Description for the usage of the obj input parameter
obj_doc = \
        """obj : :obj:`~Pipeline` object or :obj:`~Projection` object
            Instance of the :class:`~Pipeline` class or :class:`~Projection`
            class that calls this method."""

# Description of the various read_parameters methods
read_par_doc = \
        """Reads in the {0} parameters from the provided *PRISM* parameter
        file and saves them in the current :obj:`~{0}` instance."""

# Description of the various save_data methods
save_data_doc = \
        """Parameters
        ----------
        {0}{1}
        data_dict : dict
            Dict containing the data that needs to be saved to the HDF5-file.

        Dict Variables
        --------------
        keyword : {2}
            String specifying the type of data that needs to be saved.
        data : int, float, list
            The actual data that needs to be saved at data keyword `keyword`.

        Generates
        ---------
        The specified data is saved to the HDF5-file."""
save_data_doc_p = save_data_doc.format(
    "", "", "{'impl_cut', 'impl_sam', 'n_eval_sam'}")
save_data_doc_e = save_data_doc.format(
    std_emul_i_doc+"\n\t", lemul_s_doc+"\n\t", "{'active_par', "
    "'active_par_data', 'cov_mat', 'exp_dot_term', 'mod_real_set', "
    "'regression'}")
save_data_doc_pr = save_data_doc.format(
    "", "", "{'impl_cut', 'proj_grid', 'nD_proj_hcube'}")
